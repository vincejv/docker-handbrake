From 7f6c757abcf2ab16ee940b88a03085cde13577f6 Mon Sep 17 00:00:00 2001
From: Vince JV <1276544+vincejv@users.noreply.github.com>
Date: Thu, 18 Apr 2024 17:15:26 +0800
Subject: [PATCH 2/2] Merge global motion estimation patch

---
 ...A03-improve-global-motion-estimation.patch | 61 +++++++++++++++++++
 1 file changed, 61 insertions(+)
 create mode 100644 contrib/svt-av1/A03-improve-global-motion-estimation.patch

diff --git a/contrib/svt-av1/A03-improve-global-motion-estimation.patch b/contrib/svt-av1/A03-improve-global-motion-estimation.patch
new file mode 100644
index 000000000..c1bb8594c
--- /dev/null
+++ b/contrib/svt-av1/A03-improve-global-motion-estimation.patch
@@ -0,0 +1,61 @@
+From a6393ef48fc57f2431b641bbe31517c29561d9a9 Mon Sep 17 00:00:00 2001
+From: stickz1 <stickman002@mail.com>
+Date: Tue, 16 Apr 2024 03:48:51 +0000
+Subject: [PATCH] Improve global motion estimation
+
+---
+ Source/Lib/Encoder/Codec/EbEncWarpedMotion.c        | 4 ++--
+ Source/Lib/Encoder/Codec/EbGlobalMotionEstimation.c | 9 +++++----
+ 2 files changed, 7 insertions(+), 6 deletions(-)
+
+diff --git a/Source/Lib/Encoder/Codec/EbEncWarpedMotion.c b/Source/Lib/Encoder/Codec/EbEncWarpedMotion.c
+index 7ac7a22f3..a956562f3 100644
+--- a/Source/Lib/Encoder/Codec/EbEncWarpedMotion.c
++++ b/Source/Lib/Encoder/Codec/EbEncWarpedMotion.c
+@@ -141,8 +141,8 @@ static int64_t warp_error(EbWarpedMotionParams *wm, const uint8_t *const ref, in
+                            subsampling_y,
+                            &conv_params);
+ 
+-            gm_sumerr += svt_av1_calc_frame_error(
+-                tmp, WARP_ERROR_BLOCK, dst + j + i * p_stride, warp_w, warp_h, p_stride);
++            gm_sumerr += svt_nxm_sad_kernel(tmp, WARP_ERROR_BLOCK, dst + j + i * p_stride, p_stride, warp_h, warp_w);
++
+             if (gm_sumerr > best_error)
+                 return gm_sumerr;
+         }
+diff --git a/Source/Lib/Encoder/Codec/EbGlobalMotionEstimation.c b/Source/Lib/Encoder/Codec/EbGlobalMotionEstimation.c
+index 11fbce7f2..e29e5594c 100644
+--- a/Source/Lib/Encoder/Codec/EbGlobalMotionEstimation.c
++++ b/Source/Lib/Encoder/Codec/EbGlobalMotionEstimation.c
+@@ -394,6 +394,7 @@ void svt_aom_upscale_wm_params(EbWarpedMotionParams *wm_params, uint8_t scale_fa
+                                              GM_TRANS_MAX * GM_TRANS_DECODE_FACTOR);
+     }
+ }
++
+ void compute_global_motion(PictureParentControlSet *pcs, int *frm_corners, int num_frm_corners,
+                            EbPictureBufferDesc *det_input_pic, //src frame for detection
+                            EbPictureBufferDesc *det_ref_pic, //ref frame for detection
+@@ -506,16 +507,16 @@ void compute_global_motion(PictureParentControlSet *pcs, int *frm_corners, int n
+             if (global_motion.wmtype == IDENTITY)
+                 continue;
+ 
+-            const int64_t ref_frame_error = svt_av1_calc_frame_error(
+-                ref_buffer, ref_pic->stride_y, frm_buffer, input_pic->width, input_pic->height, input_pic->stride_y);
++            const uint32_t ref_sad_error = svt_nxm_sad_kernel(
++                ref_buffer, ref_pic->stride_y, frm_buffer, input_pic->stride_y, input_pic->height, input_pic->width);
+ 
+-            if (ref_frame_error == 0)
++            if (ref_sad_error == 0)
+                 continue;
+ 
+             // If the best error advantage found doesn't meet the threshold for
+             // this motion type, revert to IDENTITY.
+             if (!svt_av1_is_enough_erroradvantage(
+-                    (double)best_warp_error / ref_frame_error,
++                    (double)best_warp_error / ref_sad_error,
+                     svt_aom_gm_get_params_cost(&global_motion, ref_params, allow_high_precision_mv),
+                     GM_ERRORADV_TR_0 /* TODO: check error advantage */)) {
+                 global_motion = default_warp_params;
+-- 
+GitLab
+
-- 
2.34.1

