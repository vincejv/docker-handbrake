From e2012ed57cf86c43a38ff745294683ecd54a734f Mon Sep 17 00:00:00 2001
From: Vince JV <1276544+vincejv@users.noreply.github.com>
Date: Mon, 6 May 2024 17:51:38 +0800
Subject: [PATCH] Add frame luma bias to SVT-AV1-PSY

---
 ...rame-level-low-luma-bias-a-parameter.patch | 174 ++++++++++++++++++
 ...Dep-Cost-Scale-adjustment-for-Tune-3.patch |  40 ++++
 ...of-frame-luma-bias-from-0-4-to-0-100.patch |  52 ++++++
 3 files changed, 266 insertions(+)
 create mode 100644 contrib/svt-av1/A04-Make-frame-level-low-luma-bias-a-parameter.patch
 create mode 100644 contrib/svt-av1/A05-Experimental-TPL-Dep-Cost-Scale-adjustment-for-Tune-3.patch
 create mode 100644 contrib/svt-av1/A06-Increase-granularity-of-frame-luma-bias-from-0-4-to-0-100.patch

diff --git a/contrib/svt-av1/A04-Make-frame-level-low-luma-bias-a-parameter.patch b/contrib/svt-av1/A04-Make-frame-level-low-luma-bias-a-parameter.patch
new file mode 100644
index 000000000..ede0fd0f1
--- /dev/null
+++ b/contrib/svt-av1/A04-Make-frame-level-low-luma-bias-a-parameter.patch
@@ -0,0 +1,174 @@
+From 494d570e3e14a879302ace1e22d10a37a92f5a43 Mon Sep 17 00:00:00 2001
+From: Clybius <clybius@gmail.com>
+Date: Sun, 5 May 2024 11:47:01 -0500
+Subject: [PATCH] Make frame-level low-luma-bias a parameter.
+ (--frame-luma-bias 0-4)
+
+---
+ Source/API/EbSvtAv1Enc.h                        |  9 ++++++++-
+ Source/App/EncApp/EbAppConfig.c                 | 10 ++++++++++
+ Source/Lib/Encoder/Codec/EbPictureControlSet.h  |  1 +
+ Source/Lib/Encoder/Codec/EbRateControlProcess.c |  6 +++---
+ Source/Lib/Encoder/Globals/EbEncHandle.c        |  4 ++++
+ Source/Lib/Encoder/Globals/EbEncSettings.c      | 14 +++++++++++---
+ 6 files changed, 37 insertions(+), 7 deletions(-)
+
+diff --git a/Source/API/EbSvtAv1Enc.h b/Source/API/EbSvtAv1Enc.h
+index 82c166fc..8614519d 100644
+--- a/Source/API/EbSvtAv1Enc.h
++++ b/Source/API/EbSvtAv1Enc.h
+@@ -985,8 +985,15 @@ typedef struct EbSvtAv1EncConfiguration {
+      */
+     uint8_t qp_scale_compress_strength;
+ 
++    /* @brief Experimental frame-level luma bias to improve quality in dark scenes
++     * 0: no bias, stock behavior
++     * 1-4: enable low-luma bias, the higher the number the stronger the bias
++     * Default is 0
++     */
++    uint8_t frame_luma_bias;
++
+     /*Add 128 Byte Padding to Struct to avoid changing the size of the public configuration struct*/
+-    uint8_t padding[128 - 5 * sizeof(uint8_t) - sizeof(int8_t)];
++    uint8_t padding[128 - 6 * sizeof(uint8_t) - sizeof(int8_t)];
+ 
+ } EbSvtAv1EncConfiguration;
+ 
+diff --git a/Source/App/EncApp/EbAppConfig.c b/Source/App/EncApp/EbAppConfig.c
+index 618c16b3..a790ee55 100644
+--- a/Source/App/EncApp/EbAppConfig.c
++++ b/Source/App/EncApp/EbAppConfig.c
+@@ -205,6 +205,8 @@
+ 
+ #define QP_SCALE_COMPRESS_STRENGTH_TOKEN "--qp-scale-compress-strength"
+ 
++#define FRAME_LUMA_BIAS_TOKEN "--frame-luma-bias"
++
+ static EbErrorType validate_error(EbErrorType err, const char *token, const char *value) {
+     switch (err) {
+     case EB_ErrorNone: return EB_ErrorNone;
+@@ -1237,6 +1239,11 @@ ConfigEntry config_entry_psy[] = {
+      QP_SCALE_COMPRESS_STRENGTH_TOKEN,
+      "[PSY] QP scale compress strength, default is 1 [0-3]",
+      set_cfg_generic_token},
++    // Frame-level low-luma bias
++    {SINGLE_INPUT,
++     FRAME_LUMA_BIAS_TOKEN,
++     "[PSY] Adjusts the frame's QP based on the frame's average luma value, default is 0 [0 to 4]",
++     set_cfg_generic_token},
+     // Termination
+     {SINGLE_INPUT, NULL, NULL, NULL}};
+ 
+@@ -1428,6 +1435,9 @@ ConfigEntry config_entry[] = {
+     // QP scale compression
+     {SINGLE_INPUT, QP_SCALE_COMPRESS_STRENGTH_TOKEN, "QpScaleCompressStrength", set_cfg_generic_token},
+ 
++    // Frame-level low-luma bias
++    {SINGLE_INPUT, FRAME_LUMA_BIAS_TOKEN, "FrameLumaBias", set_cfg_generic_token},
++
+     // Termination
+     {SINGLE_INPUT, NULL, NULL, NULL}};
+ 
+diff --git a/Source/Lib/Encoder/Codec/EbPictureControlSet.h b/Source/Lib/Encoder/Codec/EbPictureControlSet.h
+index b9932a78..edb8d4c5 100644
+--- a/Source/Lib/Encoder/Codec/EbPictureControlSet.h
++++ b/Source/Lib/Encoder/Codec/EbPictureControlSet.h
+@@ -1205,6 +1205,7 @@ typedef struct PictureControlSetInitData {
+     Bool    enable_alt_curve;
+     int8_t sharpness;
+     uint8_t qp_scale_compress_strength;
++    uint8_t frame_luma_bias;
+ } PictureControlSetInitData;
+ 
+ typedef struct Av1Comp {
+diff --git a/Source/Lib/Encoder/Codec/EbRateControlProcess.c b/Source/Lib/Encoder/Codec/EbRateControlProcess.c
+index 571a357a..58691e29 100644
+--- a/Source/Lib/Encoder/Codec/EbRateControlProcess.c
++++ b/Source/Lib/Encoder/Codec/EbRateControlProcess.c
+@@ -3322,14 +3322,14 @@ void *svt_aom_rate_control_kernel(void *input_ptr) {
+                                 (int32_t)(new_qindex));
+                         }
+ 
+-                        if (scs->static_config.use_fixed_qindex_offsets || scs->static_config.tune == 3 || scs->static_config.extended_crf_qindex_offset) {
++                        if (scs->static_config.use_fixed_qindex_offsets || scs->static_config.frame_luma_bias != 0 || scs->static_config.extended_crf_qindex_offset) {
+                             int32_t qindex = scs->static_config.use_fixed_qindex_offsets == 1
+                                 ? scs_qindex
+                                 : frm_hdr->quantization_params
+                                       .base_q_idx; // do not shut the auto QPS if use_fixed_qindex_offsets 2
+ 
+-                            if (scs->static_config.tune == 3) {
+-                                qindex += (int32_t)rint(-pow((255 - pcs->ppcs->avg_luma) / (1024.0 / (pcs->temporal_layer_index + 1)), 0.5) * (qindex / 8.0)); // Frame-level luma adjustment. Gives more bitrate to darker scenes.
++                            if (scs->static_config.frame_luma_bias != 0) {
++                                qindex += (int32_t)rint(-pow((255 - pcs->ppcs->avg_luma) / (1024.0 / (pcs->temporal_layer_index * scs->static_config.frame_luma_bias)), 0.5) * (qindex / 8.0)); // Frame-level luma adjustment. Gives more bitrate to darker scenes.
+                             }
+ 
+                             if (!frame_is_intra_only(pcs->ppcs)) {
+diff --git a/Source/Lib/Encoder/Globals/EbEncHandle.c b/Source/Lib/Encoder/Globals/EbEncHandle.c
+index ced66786..d263de18 100644
+--- a/Source/Lib/Encoder/Globals/EbEncHandle.c
++++ b/Source/Lib/Encoder/Globals/EbEncHandle.c
+@@ -1622,6 +1622,7 @@ EB_API EbErrorType svt_av1_enc_init(EbComponentType *svt_enc_component)
+         input_data.variance_octile = enc_handle_ptr->scs_instance_array[instance_index]->scs->static_config.variance_octile;
+         input_data.sharpness = enc_handle_ptr->scs_instance_array[instance_index]->scs->static_config.sharpness;
+         input_data.qp_scale_compress_strength = enc_handle_ptr->scs_instance_array[instance_index]->scs->static_config.qp_scale_compress_strength;
++        input_data.frame_luma_bias = enc_handle_ptr->scs_instance_array[instance_index]->scs->static_config.frame_luma_bias;
+ 
+         EB_NEW(
+             enc_handle_ptr->picture_parent_control_set_pool_ptr_array[instance_index],
+@@ -4606,6 +4607,9 @@ static void copy_api_from_app(
+ 
+     // QP scaling compression
+     scs->static_config.qp_scale_compress_strength = config_struct->qp_scale_compress_strength;
++
++    // Frame-level luma bias
++    scs->static_config.frame_luma_bias = config_struct->frame_luma_bias;
+     return;
+ }
+ 
+diff --git a/Source/Lib/Encoder/Globals/EbEncSettings.c b/Source/Lib/Encoder/Globals/EbEncSettings.c
+index b5bfc58f..3262a651 100644
+--- a/Source/Lib/Encoder/Globals/EbEncSettings.c
++++ b/Source/Lib/Encoder/Globals/EbEncSettings.c
+@@ -918,6 +918,11 @@ EbErrorType svt_av1_verify_settings(SequenceControlSet *scs) {
+         return_error = EB_ErrorBadParameter;
+     }
+ 
++    if (config->frame_luma_bias > 4) {
++        SVT_ERROR("Instance %u: Frame-level luma bias value must be between 0 and 4\n", channel_number + 1);
++        return_error = EB_ErrorBadParameter;
++    }
++
+     return return_error;
+ }
+ 
+@@ -1069,6 +1074,7 @@ EbErrorType svt_av1_set_default_params(EbSvtAv1EncConfiguration *config_ptr) {
+     config_ptr->sharpness                         = 0; 
+     config_ptr->extended_crf_qindex_offset        = 0;
+     config_ptr->qp_scale_compress_strength        = 1;
++    config_ptr->frame_luma_bias                   = 0;
+     return return_error;
+ }
+ 
+@@ -1191,9 +1197,10 @@ void svt_av1_print_lib_params(SequenceControlSet *scs) {
+                      config->film_grain_denoise_strength);
+         }
+ 
+-        SVT_INFO("SVT [config]: Sharpness / QP scale compress strength \t\t\t: %d / %d\n",
++        SVT_INFO("SVT [config]: Sharpness / QP scale compress strength / Frame low-luma bias \t\t\t: %d / %d / %d\n",
+                  config->sharpness,
+-                 config->qp_scale_compress_strength);
++                 config->qp_scale_compress_strength,
++                 config->frame_luma_bias);
+     }
+ #ifdef DEBUG_BUFFERS
+     SVT_INFO("SVT [config]: INPUT / OUTPUT \t\t\t\t\t\t\t: %d / %d\n",
+@@ -2063,7 +2070,8 @@ EB_API EbErrorType svt_av1_enc_parse_parameter(EbSvtAv1EncConfiguration *config_
+         {"variance-boost-strength", &config_struct->variance_boost_strength},
+         {"variance-octile", &config_struct->variance_octile},
+         {"enable-alt-curve", &config_struct->enable_alt_curve},
+-        {"qp-scale-compress-strength", &config_struct->qp_scale_compress_strength}
++        {"qp-scale-compress-strength", &config_struct->qp_scale_compress_strength},
++        {"frame-luma-bias", &config_struct->frame_luma_bias}
+     };
+     const size_t uint8_opts_size = sizeof(uint8_opts) / sizeof(uint8_opts[0]);
+ 
diff --git a/contrib/svt-av1/A05-Experimental-TPL-Dep-Cost-Scale-adjustment-for-Tune-3.patch b/contrib/svt-av1/A05-Experimental-TPL-Dep-Cost-Scale-adjustment-for-Tune-3.patch
new file mode 100644
index 000000000..8db448ffe
--- /dev/null
+++ b/contrib/svt-av1/A05-Experimental-TPL-Dep-Cost-Scale-adjustment-for-Tune-3.patch
@@ -0,0 +1,40 @@
+From bdb27ecdc2ae7ac83e46f37646c5e611b3ff82eb Mon Sep 17 00:00:00 2001
+From: Clybius <clybius@gmail.com>
+Date: Sun, 5 May 2024 11:47:37 -0500
+Subject: [PATCH] Experimental TPL Dep Cost Scale adjustment for Tune 3.
+
+---
+ .../Encoder/Codec/EbSourceBasedOperationsProcess.c   | 12 ++++++------
+ 1 file changed, 6 insertions(+), 6 deletions(-)
+
+diff --git a/Source/Lib/Encoder/Codec/EbSourceBasedOperationsProcess.c b/Source/Lib/Encoder/Codec/EbSourceBasedOperationsProcess.c
+index 2fa5257c..1391cdda 100644
+--- a/Source/Lib/Encoder/Codec/EbSourceBasedOperationsProcess.c
++++ b/Source/Lib/Encoder/Codec/EbSourceBasedOperationsProcess.c
+@@ -954,8 +954,8 @@ static void tpl_mc_flow_dispenser_sb_generic(EncodeContext *enc_ctx, SequenceCon
+                 get_quantize_error(&mb_plane, best_coeff, qcoeff, dqcoeff, tx_size, &eob, &recon_error, &sse);
+ 
+                 int rate_cost        = pcs->tpl_ctrls.compute_rate ? rate_estimator(qcoeff, eob, tx_size) : 0;
+-                tpl_stats.srcrf_rate = (rate_cost << TPL_DEP_COST_SCALE_LOG2) << tpl_ctrls->subsample_tx;
+-                tpl_stats.srcrf_dist = (recon_error << (TPL_DEP_COST_SCALE_LOG2)) << tpl_ctrls->subsample_tx;
++                tpl_stats.srcrf_rate = (rate_cost << (pcs->scs->static_config.tune == 3 ? 1 : TPL_DEP_COST_SCALE_LOG2)) << tpl_ctrls->subsample_tx; // Experimental tune 3 change, likely to be modified in the future.
++                tpl_stats.srcrf_dist = (recon_error << (pcs->scs->static_config.tune == 3 ? 1 : TPL_DEP_COST_SCALE_LOG2)) << tpl_ctrls->subsample_tx;
+             }
+             if (scs->tpl_lad_mg > 0) {
+                 //store src based stats
+@@ -1182,11 +1182,11 @@ static void tpl_mc_flow_dispenser_sb_generic(EncodeContext *enc_ctx, SequenceCon
+             }
+         }
+ 
+-        tpl_stats.recrf_dist = (recon_error << (TPL_DEP_COST_SCALE_LOG2)) << tpl_ctrls->subsample_tx;
+-        tpl_stats.recrf_rate = (rate_cost << TPL_DEP_COST_SCALE_LOG2) << tpl_ctrls->subsample_tx;
++        tpl_stats.recrf_dist = (recon_error << (pcs->scs->static_config.tune == 3 ? 1 : TPL_DEP_COST_SCALE_LOG2)) << tpl_ctrls->subsample_tx;
++        tpl_stats.recrf_rate = (rate_cost << (pcs->scs->static_config.tune == 3 ? 1 : TPL_DEP_COST_SCALE_LOG2)) << tpl_ctrls->subsample_tx;
+         if (best_mode != NEWMV) {
+-            tpl_stats.srcrf_dist = (recon_error << (TPL_DEP_COST_SCALE_LOG2)) << tpl_ctrls->subsample_tx;
+-            tpl_stats.srcrf_rate = (rate_cost << TPL_DEP_COST_SCALE_LOG2) << tpl_ctrls->subsample_tx;
++            tpl_stats.srcrf_dist = (recon_error << (pcs->scs->static_config.tune == 3 ? 1 : TPL_DEP_COST_SCALE_LOG2)) << tpl_ctrls->subsample_tx;
++            tpl_stats.srcrf_rate = (rate_cost << (pcs->scs->static_config.tune == 3 ? 1 : TPL_DEP_COST_SCALE_LOG2)) << tpl_ctrls->subsample_tx;
+         }
+ 
+         tpl_stats.recrf_dist = AOMMAX(tpl_stats.srcrf_dist, tpl_stats.recrf_dist);
diff --git a/contrib/svt-av1/A06-Increase-granularity-of-frame-luma-bias-from-0-4-to-0-100.patch b/contrib/svt-av1/A06-Increase-granularity-of-frame-luma-bias-from-0-4-to-0-100.patch
new file mode 100644
index 000000000..4abd62354
--- /dev/null
+++ b/contrib/svt-av1/A06-Increase-granularity-of-frame-luma-bias-from-0-4-to-0-100.patch
@@ -0,0 +1,52 @@
+From 2311fbabc24af222f3bd71717e054de58fe8ff88 Mon Sep 17 00:00:00 2001
+From: Clybius <clybius@gmail.com>
+Date: Mon, 6 May 2024 00:52:32 -0500
+Subject: [PATCH] Increase granularity of --frame-luma-bias from 0-4 to 0-100
+
+---
+ Source/App/EncApp/EbAppConfig.c                 | 2 +-
+ Source/Lib/Encoder/Codec/EbRateControlProcess.c | 2 +-
+ Source/Lib/Encoder/Globals/EbEncSettings.c      | 4 ++--
+ 3 files changed, 4 insertions(+), 4 deletions(-)
+
+diff --git a/Source/App/EncApp/EbAppConfig.c b/Source/App/EncApp/EbAppConfig.c
+index a790ee55..bc615e6e 100644
+--- a/Source/App/EncApp/EbAppConfig.c
++++ b/Source/App/EncApp/EbAppConfig.c
+@@ -1242,7 +1242,7 @@ ConfigEntry config_entry_psy[] = {
+     // Frame-level low-luma bias
+     {SINGLE_INPUT,
+      FRAME_LUMA_BIAS_TOKEN,
+-     "[PSY] Adjusts the frame's QP based on the frame's average luma value, default is 0 [0 to 4]",
++     "[PSY] Adjusts the frame's QP based on the frame's average luma value, default is 0 [0 to 100]",
+      set_cfg_generic_token},
+     // Termination
+     {SINGLE_INPUT, NULL, NULL, NULL}};
+diff --git a/Source/Lib/Encoder/Codec/EbRateControlProcess.c b/Source/Lib/Encoder/Codec/EbRateControlProcess.c
+index 58691e29..206e3091 100644
+--- a/Source/Lib/Encoder/Codec/EbRateControlProcess.c
++++ b/Source/Lib/Encoder/Codec/EbRateControlProcess.c
+@@ -3329,7 +3329,7 @@ void *svt_aom_rate_control_kernel(void *input_ptr) {
+                                       .base_q_idx; // do not shut the auto QPS if use_fixed_qindex_offsets 2
+ 
+                             if (scs->static_config.frame_luma_bias != 0) {
+-                                qindex += (int32_t)rint(-pow((255 - pcs->ppcs->avg_luma) / (1024.0 / (pcs->temporal_layer_index * scs->static_config.frame_luma_bias)), 0.5) * (qindex / 8.0)); // Frame-level luma adjustment. Gives more bitrate to darker scenes.
++                                qindex += (int32_t)rint(-pow((255 - pcs->ppcs->avg_luma) / (1024.0 / (pcs->temporal_layer_index * 4 * (0.01 * scs->static_config.frame_luma_bias))), 0.5) * (qindex / 8.0)); // Frame-level luma adjustment. Gives more bitrate to darker scenes.
+                             }
+ 
+                             if (!frame_is_intra_only(pcs->ppcs)) {
+diff --git a/Source/Lib/Encoder/Globals/EbEncSettings.c b/Source/Lib/Encoder/Globals/EbEncSettings.c
+index 3262a651..d01f8918 100644
+--- a/Source/Lib/Encoder/Globals/EbEncSettings.c
++++ b/Source/Lib/Encoder/Globals/EbEncSettings.c
+@@ -918,8 +918,8 @@ EbErrorType svt_av1_verify_settings(SequenceControlSet *scs) {
+         return_error = EB_ErrorBadParameter;
+     }
+ 
+-    if (config->frame_luma_bias > 4) {
+-        SVT_ERROR("Instance %u: Frame-level luma bias value must be between 0 and 4\n", channel_number + 1);
++    if (config->frame_luma_bias > 100) {
++        SVT_ERROR("Instance %u: Frame-level luma bias value must be between 0 and 100\n", channel_number + 1);
+         return_error = EB_ErrorBadParameter;
+     }
+ 
-- 
2.34.1

