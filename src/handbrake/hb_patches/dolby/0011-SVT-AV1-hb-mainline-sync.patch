From aa9fdb5c4e42e7e35d051b43bdebf26b9a741c93 Mon Sep 17 00:00:00 2001
From: Vince JV <1276544+vincejv@users.noreply.github.com>
Date: Thu, 9 May 2024 17:21:58 +0800
Subject: [PATCH] SVT-AV1 hb mainline sync

---
 libhb/encsvtav1.c | 51 +++++++++++++++++++++++++++++++++++++----------
 1 file changed, 40 insertions(+), 11 deletions(-)

diff --git a/libhb/encsvtav1.c b/libhb/encsvtav1.c
index c72c25bef..75e4617e8 100644
--- a/libhb/encsvtav1.c
+++ b/libhb/encsvtav1.c
@@ -1,6 +1,6 @@
 /* encsvtav1.c
 
-   Copyright (c) 2003-2023 HandBrake Team
+   Copyright (c) 2003-2024 HandBrake Team
    This file is part of the HandBrake source code
    partially based on FFmpeg libsvtav1.c
    Homepage: <http://handbrake.fr/>.
@@ -12,6 +12,9 @@
 #include "handbrake/hb_dict.h"
 #include "handbrake/av1_common.h"
 #include "handbrake/hdr10plus.h"
+#include "handbrake/dovi_common.h"
+#include "handbrake/extradata.h"
+
 #include "libavutil/avutil.h"
 #include "svt-av1/EbSvtAv1ErrorCodes.h"
 #include "svt-av1/EbSvtAv1Enc.h"
@@ -309,9 +312,6 @@ int encsvtInit(hb_work_object_t *w, hb_job_t *job)
         job->pass_id == HB_PASS_ENCODE_FINAL)
     {
         hb_interjob_t *interjob = hb_interjob_get(job->h);
-
-        if (job->pass_id == HB_PASS_ENCODE_ANALYSIS)
-
         param->rc_stats_buffer.buf = interjob->context;
         param->rc_stats_buffer.sz  = interjob->context_size;
         param->pass = job->pass_id == HB_PASS_ENCODE_ANALYSIS ? 1 : 2;
@@ -340,8 +340,34 @@ int encsvtInit(hb_work_object_t *w, hb_job_t *job)
         return 1;
     }
 
-    w->config->extradata.length = headerPtr->n_filled_len;
-    memcpy(w->config->extradata.bytes, headerPtr->p_buffer, headerPtr->n_filled_len);
+    if (hb_set_extradata(w->extradata, headerPtr->p_buffer, headerPtr->n_filled_len))
+    {
+        hb_error("encsvtav1: error setting extradata");
+        return 1;
+    }
+
+    // Update and set Dolby Vision level
+    if (job->passthru_dynamic_hdr_metadata & DOVI)
+    {
+        int level_idx, high_tier;
+        hb_parse_av1_extradata(*w->extradata, &level_idx, &high_tier);
+
+        int pps = (double)job->width * job->height * (job->vrate.num / job->vrate.den);
+        int bitrate = job->vquality == HB_INVALID_VIDEO_QUALITY ? job->vbitrate : -1;
+
+        // Dolby Vision requires VBV settings to enable HRD
+        // but SVT-AV1 supports max-bit-rate only in CFR mode
+        // so that the Dolby Vision level to something comparable
+        // to the current AV1 level
+        if (param->max_bit_rate == 0)
+        {
+            int max_rate = hb_dovi_max_rate(job->vcodec, job->width, pps, bitrate,
+                                            level_idx, high_tier);
+            param->max_bit_rate = max_rate * 1000;
+        }
+
+        job->dovi.dv_level = hb_dovi_level(job->width, pps, param->max_bit_rate / 1000, high_tier);
+    }
 
     svt_ret = svt_av1_enc_stream_header_release(headerPtr);
     if (svt_ret != EB_ErrorNone)
@@ -493,6 +519,12 @@ static int send(hb_work_object_t *w, hb_buffer_t *in)
                 svt_add_metadata(headerPtr, EB_AV1_METADATA_TYPE_ITUT_T35, payload, playload_size);
                 av_freep(&payload);
             }
+            else if (job->passthru_dynamic_hdr_metadata & DOVI &&
+                     side_data->type == AV_FRAME_DATA_DOVI_RPU_BUFFER)
+            {
+                svt_add_metadata(headerPtr, EB_AV1_METADATA_TYPE_ITUT_T35, side_data->data, side_data->size);
+            }
+
         }
     }
 
@@ -597,15 +629,12 @@ static void flush(hb_work_object_t *w, hb_buffer_t *in, hb_buffer_list_t *list)
     send(w, in);
 
     hb_buffer_t *out = NULL;
-
     while (receive(w, &out, 1) == 0)
     {
         hb_buffer_list_append(list, out);
     }
 
     // Store the first pass stats for the next
-    // N.B.: this is needed only for the first pass
-    // the second one will reuse the existing buffer
     if (job->pass_id == HB_PASS_ENCODE_ANALYSIS && interjob->context == NULL)
     {
         SvtAv1FixedBuf first_pass_stat;
@@ -627,7 +656,7 @@ static void flush(hb_work_object_t *w, hb_buffer_t *in, hb_buffer_list_t *list)
 int encsvtWork(hb_work_object_t *w, hb_buffer_t **buf_in,
                hb_buffer_t **buf_out)
 {
-    hb_buffer_t       *in = *buf_in;
+    hb_buffer_t      *in = *buf_in;
     hb_buffer_list_t  list;
 
     *buf_out = NULL;
@@ -636,7 +665,7 @@ int encsvtWork(hb_work_object_t *w, hb_buffer_t **buf_in,
     if (in->s.flags & HB_BUF_FLAG_EOF)
     {
         // EOF on input. Flush any frames still in the decoder then
-        // send the eof downstream to tell the muxer we're done.
+        // send the EOF downstream to tell the muxer we're done.
         flush(w, in, &list);
         hb_buffer_list_append(&list, hb_buffer_eof_init());
 
-- 
2.34.1

