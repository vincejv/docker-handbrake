From 20f3b12ffdb530876d6517cf9ec6c6f44a3503d2 Mon Sep 17 00:00:00 2001
From: Damiano Galassi <damiog@gmail.com>
Date: Thu, 22 Feb 2024 09:37:43 +0100
Subject: [PATCH] libhb: refactor Dolby Vision level selection code, defauls to
 high tier and higher vbv settings when possible.

---
 libhb/dovi_common.c           |  74 ++++++++++++++++++++++++
 libhb/encx265.c               | 103 ++++++++++------------------------
 libhb/handbrake/dovi_common.h |   6 +-
 libhb/handbrake/h265_common.h |  29 ++++++++++
 libhb/platform/macosx/encvt.c |  22 ++++++++
 libhb/work.c                  |  31 +++-------
 6 files changed, 170 insertions(+), 95 deletions(-)
 create mode 100644 libhb/dovi_common.c

diff --git a/libhb/dovi_common.c b/libhb/dovi_common.c
new file mode 100644
index 000000000..a70c2d20c
--- /dev/null
+++ b/libhb/dovi_common.c
@@ -0,0 +1,74 @@
+/* dovi_common.c
+
+   Copyright (c) 2003-2024 HandBrake Team
+   This file is part of the HandBrake source code
+   Homepage: <http://handbrake.fr/>.
+   It may be used under the terms of the GNU General Public License v2.
+   For full terms see the file COPYING file or visit http://www.gnu.org/licenses/gpl-2.0.html
+ */
+
+#include <string.h>
+#include "handbrake/dovi_common.h"
+#include "handbrake/h265_common.h"
+
+int hb_dovi_max_rate(int width, int pps, int bitrate, int level, int high_tier)
+{
+    int max_rate = 0;
+    if (level)
+    {
+        for (int i = 0; hb_h265_level_limits[i].level_id != 0; i++)
+        {
+            if (hb_h265_level_limits[i].level_id == level)
+            {
+                max_rate = high_tier ?
+                                    hb_h265_level_limits[i].max_bitrate_high_tier :
+                                    hb_h265_level_limits[i].max_bitrate_main_tier;
+                break;
+            }
+        }
+    }
+    else
+    {
+        for (int i = 0; hb_dolby_vision_levels[i].id != 0; i++)
+        {
+            int level_max_rate = high_tier ?
+                                    hb_dolby_vision_levels[i].max_bitrate_high_tier :
+                                    hb_dolby_vision_levels[i].max_bitrate_main_tier;
+
+            if (pps <= hb_dolby_vision_levels[i].max_pps &&
+                width <= hb_dolby_vision_levels[i].max_width &&
+                bitrate <= level_max_rate * 1000)
+            {
+                max_rate = level_max_rate;
+                break;
+            }
+        }
+    }
+
+    return max_rate;
+}
+
+int hb_dovi_level(int width, int pps, int max_rate, int high_tier)
+{
+    int dv_level = hb_dolby_vision_levels[12].id;
+;
+
+    for (int i = 0; hb_dolby_vision_levels[i].id != 0; i++)
+    {
+        int max_pps = hb_dolby_vision_levels[i].max_pps;
+        int max_width = hb_dolby_vision_levels[i].max_width;
+        int tier_max_rate = high_tier ?
+                                hb_dolby_vision_levels[i].max_bitrate_high_tier :
+                                hb_dolby_vision_levels[i].max_bitrate_main_tier;
+
+        tier_max_rate *= 1000;
+
+        if (pps <= max_pps && max_rate <= tier_max_rate && width <= max_width)
+        {
+            dv_level = hb_dolby_vision_levels[i].id;
+            break;
+        }
+    }
+
+    return dv_level;
+}
diff --git a/libhb/encx265.c b/libhb/encx265.c
index 89f996d2c..761630db0 100644
--- a/libhb/encx265.c
+++ b/libhb/encx265.c
@@ -272,42 +272,6 @@ int encx265Init(hb_work_object_t *w, hb_job_t *job)
         }
     }
 
-    if (job->passthru_dynamic_hdr_metadata & DOVI)
-    {
-        char dolbyVisionProfile[256];
-        snprintf(dolbyVisionProfile, sizeof(dolbyVisionProfile),
-                 "%hu%hu",
-                 (unsigned short)job->dovi.dv_profile,
-                 (unsigned short)job->dovi.dv_bl_signal_compatibility_id);
-
-        if (param_parse(pv, param, "dolby-vision-profile", dolbyVisionProfile))
-        {
-            goto fail;
-        }
-
-        // Dolby Vision requires VBV settings to enable HRD
-        // set the max value for the current level
-        int max_rate = hb_dolby_vision_levels[job->dovi.dv_level - 1].max_bitrate_main_tier;
-
-        char vbvMaxRate[256];
-        snprintf(vbvMaxRate, sizeof(vbvMaxRate),
-                 "%d", max_rate * 1024);
-        if (param_parse(pv, param, "vbv-maxrate", vbvMaxRate))
-        {
-            goto fail;
-        }
-
-        char vbvBufSize[256];
-        snprintf(vbvBufSize, sizeof(vbvBufSize),
-                 "%d", max_rate * 1024);
-        if (param_parse(pv, param, "vbv-bufsize", vbvBufSize))
-        {
-            goto fail;
-        }
-
-        param->bHighTier = 0;
-    }
-
     if (job->ambient.ambient_illuminance.num && job->ambient.ambient_illuminance.den)
     {
         param->ambientIlluminance = rescale(job->ambient.ambient_illuminance, 10000);
@@ -335,7 +299,6 @@ int encx265Init(hb_work_object_t *w, hb_job_t *job)
     /* iterate through x265_opts and parse the options */
     hb_dict_t *x265_opts;
     int override_mastering = 0, override_coll = 0, override_chroma_location = 0;
-    int override_vbv_maxrate = 0, override_vbv_bufsize = 0;
     x265_opts = hb_encopts_to_dict(job->encoder_options, job->vcodec);
 
     hb_dict_iter_t iter;
@@ -359,14 +322,6 @@ int encx265Init(hb_work_object_t *w, hb_job_t *job)
         {
             override_chroma_location = 1;
         }
-        if (!strcmp(key, "vbv-maxrate"))
-        {
-            override_vbv_maxrate = 1;
-        }
-        if (!strcmp(key, "vbv-bufsize"))
-        {
-            override_vbv_bufsize = 1;
-        }
 
         // here's where the strings are passed to libx265 for parsing
         // unknown options or bad values are non-fatal, see encx264.c
@@ -434,33 +389,6 @@ int encx265Init(hb_work_object_t *w, hb_job_t *job)
         job->chroma_location = param->vui.chromaSampleLocTypeBottomField + 1;
     }
 
-    /*
-     * Update Dolby Vision level in case custom
-     * values were set in the encoder_options string.
-     */
-    if (override_vbv_maxrate || override_vbv_bufsize || param->bHighTier)
-    {
-        int pps = (double)job->width * job->height * (job->vrate.num / job->vrate.den);
-        int max_rate = param->rc.vbvMaxBitrate;
-
-        for (int i = 0; hb_dolby_vision_levels[i].id != 0; i++)
-        {
-            int max_pps = hb_dolby_vision_levels[i].max_pps;
-            int max_width = hb_dolby_vision_levels[i].max_width;
-            int tier_max_rate = param->bHighTier ?
-                                    hb_dolby_vision_levels[i].max_bitrate_high_tier :
-                                    hb_dolby_vision_levels[i].max_bitrate_main_tier;
-
-            tier_max_rate *= 1024;
-
-            if (pps <= max_pps && max_rate <= tier_max_rate && job->width <= max_width)
-            {
-                job->dovi.dv_level = hb_dolby_vision_levels[i].id;
-                break;
-            }
-        }
-    }
-
     /*
      * Settings which can't be overridden in the encoder_options string
      * (muxer-specific settings, resolution, ratecontrol, etc.).
@@ -561,6 +489,37 @@ int encx265Init(hb_work_object_t *w, hb_job_t *job)
     job->areBframes = (param->bframes > 0) + (param->bframes   > 0 &&
                                               param->bBPyramid > 0);
 
+    /*
+     * Update and set Dolby Vision level
+     */
+    if (job->passthru_dynamic_hdr_metadata & DOVI)
+    {
+        char dolbyVisionProfile[256];
+        snprintf(dolbyVisionProfile, sizeof(dolbyVisionProfile),
+                 "%hu%hu",
+                 (unsigned short)job->dovi.dv_profile,
+                 (unsigned short)job->dovi.dv_bl_signal_compatibility_id);
+
+        if (param_parse(pv, param, "dolby-vision-profile", dolbyVisionProfile))
+        {
+            goto fail;
+        }
+
+        int pps = (double)job->width * job->height * (job->vrate.num / job->vrate.den);
+        int bitrate = job->vquality == HB_INVALID_VIDEO_QUALITY ? job->vbitrate : -1;
+
+        // Dolby Vision requires VBV settings to enable HRD
+        // set the max value for the current level or guess one
+        if (param->rc.vbvMaxBitrate == 0 || param->rc.vbvBufferSize == 0)
+        {
+            int max_rate = hb_dovi_max_rate(job->width, pps, bitrate, param->levelIdc, param->bHighTier);
+            param->rc.vbvMaxBitrate = max_rate * 1000;
+            param->rc.vbvBufferSize = max_rate * 1000;
+        }
+
+        job->dovi.dv_level = hb_dovi_level(job->width, pps, param->rc.vbvMaxBitrate, param->bHighTier);
+    }
+
     /* Reset global variables before opening a new encoder */
     pv->api->cleanup();
 
diff --git a/libhb/handbrake/dovi_common.h b/libhb/handbrake/dovi_common.h
index 41bf52710..da0067541 100644
--- a/libhb/handbrake/dovi_common.h
+++ b/libhb/handbrake/dovi_common.h
@@ -1,4 +1,4 @@
-/* h265_common.h
+/* dovi_common.h
 
    Copyright (c) 2003-2023 HandBrake Team
    This file is part of the HandBrake source code
@@ -11,6 +11,7 @@
 #define HANDBRAKE_DOVI_COMMON_H
 
 #include "handbrake/project.h"
+#include <stdint.h>
 
 static struct
 {
@@ -38,4 +39,7 @@ hb_dolby_vision_levels[] =
     { 0, 0, 0, 0, 0 }
 };
 
+int hb_dovi_max_rate(int width, int pps, int bitrate, int level, int high_tier);
+int hb_dovi_level(int width, int pps, int max_rate, int high_tier);
+
 #endif // HANDBRAKE_DOVI_COMMON_H
diff --git a/libhb/handbrake/h265_common.h b/libhb/handbrake/h265_common.h
index 7bb0cfad5..f434caaee 100644
--- a/libhb/handbrake/h265_common.h
+++ b/libhb/handbrake/h265_common.h
@@ -11,6 +11,7 @@
 #define HANDBRAKE_H265_COMMON_H
 
 #include "handbrake/project.h"
+#include <stdint.h>
 
 // inspired by libavcodec/hevc.h
 // in HEVC, all "random access point" NAL units are keyframes
@@ -42,6 +43,34 @@ static const int          hb_h265_level_values[]            = {
     -1,  30,  60,  63,  90,  93, 120, 123,
     150, 153, 156, 180, 183, 186,   0, };
 
+static struct
+{
+    const char *level;
+    const int level_id;
+    const uint32_t max_luma_sample_rate;
+    const uint32_t max_luma_picture_size;
+    const uint32_t max_bitrate_main_tier;
+    const uint32_t max_bitrate_high_tier;
+}
+
+hb_h265_level_limits[] =
+{
+    { "1.0", 10, 552960,     36864,    128,    128    },
+    { "2.0", 20, 3686400,    122880,   1500,   1500   },
+    { "2.1", 31, 7372800,    245760,   3000,   3000   },
+    { "3.0", 30, 16588800,   552960,   6000,   6000   },
+    { "3.1", 31, 33177600,   983040,   10000,  10000  },
+    { "4.0", 40, 66846720,   2228224,  12000,  30000  },
+    { "4.1", 41, 133693440,  2228224,  20000,  50000  },
+    { "5.0", 50, 267386880,  8912896,  25000,  100000 },
+    { "5.1", 51, 534773760,  8912896,  40000,  160000 },
+    { "5.2", 52, 1069547520, 8912896,  60000,  240000 },
+    { "6.0", 60, 1069547520, 35651584, 60000,  240000 },
+    { "6.1", 61, 2139095040, 35651584, 120000, 480000 },
+    { "6.2", 62, 4278190080, 35651584, 240000, 800000 },
+    { NULL,  0,  0,          0,        0,      0      }
+};
+
 // stolen from libx265's x265.h
 static const char * const hb_h265_fullrange_names[] = {
     "limited", "full", NULL, };
diff --git a/libhb/platform/macosx/encvt.c b/libhb/platform/macosx/encvt.c
index ab46acf1f..984b67bc0 100644
--- a/libhb/platform/macosx/encvt.c
+++ b/libhb/platform/macosx/encvt.c
@@ -1434,6 +1434,28 @@ int encvt_init(hb_work_object_t *w, hb_job_t *job)
         return -1;
     }
 
+    /*
+     * Update and set Dolby Vision level
+     * There is no way to select an high tier level
+     */
+    if (job->passthru_dynamic_hdr_metadata & DOVI)
+    {
+        int pps = (double)job->width * job->height * (job->vrate.num / job->vrate.den);
+        int bitrate = job->vquality == HB_INVALID_VIDEO_QUALITY ? job->vbitrate : -1;
+
+        // Dolby Vision requires VBV settings to enable HRD
+        // set the max value for the current level or guess one
+        if (pv->settings.vbv.maxrate == 0 || pv->settings.vbv.bufsize == 0)
+        {
+            int max_rate = hb_dovi_max_rate(job->width, pps, bitrate * 1.5, 0, 0);
+            pv->settings.vbv.maxrate = max_rate * 1000;
+            pv->settings.vbv.bufsize = max_rate * 1000;
+        }
+
+        job->dovi.dv_level = hb_dovi_level(job->width, pps, pv->settings.vbv.maxrate, 0);
+        hb_log("encvt_Init: encoding Dolby Vision with automatic data limits: %d kbit/s", pv->settings.vbv.maxrate);
+    }
+
     pv->remainingPasses = job->pass_id == HB_PASS_ENCODE_ANALYSIS ? 1 : 0;
 
     if (job->pass_id != HB_PASS_ENCODE_FINAL)
diff --git a/libhb/work.c b/libhb/work.c
index 3eb8a453a..0518d88ef 100644
--- a/libhb/work.c
+++ b/libhb/work.c
@@ -1483,32 +1483,16 @@ static void sanitize_filter_list_post(hb_job_t *job)
     }
 }
 
-static int dolby_vision_level(int width, int pps, int bitrate)
-{
-    for (int i = 0; hb_dolby_vision_levels[i].id != 0; i++)
-    {
-        if (pps <= hb_dolby_vision_levels[i].max_pps &&
-            width <= hb_dolby_vision_levels[i].max_width &&
-            bitrate <= (int)hb_dolby_vision_levels[i].max_bitrate_main_tier * 1024)
-        {
-            return hb_dolby_vision_levels[i].id;
-        }
-    }
-
-    hb_error("work: out of bound dolby vision level, using maximum");
-    return hb_dolby_vision_levels[12].id;
-}
-
 static void update_dolby_vision_level(hb_job_t *job)
 {
     // Dolby Vision has got its own definition of "level"
     // defined in section 2.2 of "Dolby Vision Profiles and Levels"
     // moreover, x265 requires vbv to be set, so do a rough guess here.
-    // Encoders can override it when needed.
+    // Encoders will override it when needed.
     int pps = (double)job->width * job->height * (job->vrate.num / job->vrate.den);
     int bitrate = job->vquality == HB_INVALID_VIDEO_QUALITY ? job->vbitrate : -1;
-
-    job->dovi.dv_level = dolby_vision_level(job->width, pps, bitrate);
+    int max_rate = hb_dovi_max_rate(job->width, pps, bitrate, 0, 1);
+    job->dovi.dv_level = hb_dovi_level(job->width, pps, max_rate, 1);
 }
 
 static void sanitize_dynamic_hdr_metadata_passthru(hb_job_t *job)
@@ -1804,9 +1788,12 @@ static void do_job(hb_job_t *job)
     hb_reduce(&job->vrate.num, &job->vrate.den,
                job->vrate.num,  job->vrate.den);
 
-    // Dolby Vision level needs to be updated now that
-    // the final width, height and frame rate is known
-    update_dolby_vision_level(job);
+    if (job->passthru_dynamic_hdr_metadata & DOVI)
+    {
+        // Dolby Vision level needs to be updated now that
+        // the final width, height and frame rate is known
+        update_dolby_vision_level(job);
+    }
 
     job->fifo_mpeg2  = hb_fifo_init( FIFO_SMALL, FIFO_SMALL_WAKE );
     job->fifo_raw    = hb_fifo_init( FIFO_SMALL, FIFO_SMALL_WAKE );
-- 
2.34.1

